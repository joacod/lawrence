"""
Export Generator Utilities
Provides functions to generate Markdown and PDF exports from feature data.
"""
import base64
import io
from datetime import datetime
from typing import Optional, Dict, Any
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
import markdown2

from src.models.core_models import FeatureOverview, TicketsData, Ticket


def generate_markdown_export(
    title: str,
    feature_overview: FeatureOverview,
    tickets: TicketsData
) -> str:
    """
    Generate a formatted Markdown export from feature data.
    
    Args:
        title: Feature title
        feature_overview: Feature overview data
        tickets: Backend and frontend tickets
    
    Returns:
        str: Formatted Markdown content
    """
    markdown_content = []
    
    # Header
    markdown_content.append(f"# {title}")
    markdown_content.append("")
    
    # Description
    markdown_content.append("## Description")
    markdown_content.append(feature_overview.description)
    markdown_content.append("")
    
    # Acceptance Criteria
    markdown_content.append("## Acceptance Criteria")
    if feature_overview.acceptance_criteria:
        for criterion in feature_overview.acceptance_criteria:
            markdown_content.append(f"- {criterion}")
    else:
        markdown_content.append("*No acceptance criteria defined yet.*")
    markdown_content.append("")
    
    # Backend Tickets
    markdown_content.append("## Backend Development Tasks")
    if tickets.backend:
        for i, ticket in enumerate(tickets.backend, 1):
            markdown_content.append(f"### Task {i}: {ticket.title}")
            markdown_content.append(ticket.description)
            if ticket.technical_details:
                markdown_content.append(f"**Technical Details:** {ticket.technical_details}")
            if ticket.acceptance_criteria:
                markdown_content.append("**Acceptance Criteria:**")
                for criterion in ticket.acceptance_criteria:
                    markdown_content.append(f"- {criterion}")
            if ticket.cursor_prompt:
                markdown_content.append(f"**Cursor Prompt:** {ticket.cursor_prompt}")
            markdown_content.append("")
    else:
        markdown_content.append("*No backend tasks defined yet.*")
        markdown_content.append("")
    
    # Frontend Tickets
    markdown_content.append("## Frontend Development Tasks")
    if tickets.frontend:
        for i, ticket in enumerate(tickets.frontend, 1):
            markdown_content.append(f"### Task {i}: {ticket.title}")
            markdown_content.append(ticket.description)
            if ticket.technical_details:
                markdown_content.append(f"**Technical Details:** {ticket.technical_details}")
            if ticket.acceptance_criteria:
                markdown_content.append("**Acceptance Criteria:**")
                for criterion in ticket.acceptance_criteria:
                    markdown_content.append(f"- {criterion}")
            if ticket.cursor_prompt:
                markdown_content.append(f"**Cursor Prompt:** {ticket.cursor_prompt}")
            markdown_content.append("")
    else:
        markdown_content.append("*No frontend tasks defined yet.*")
        markdown_content.append("")
    
    # Footer
    markdown_content.append("---")
    markdown_content.append("*Generated by Lawrence - AI Product Owner Assistant*")
    
    return "\n".join(markdown_content)


def generate_pdf_export(
    title: str,
    feature_overview: FeatureOverview,
    tickets: TicketsData
) -> bytes:
    """
    Generate a PDF export from feature data.
    
    Args:
        title: Feature title
        feature_overview: Feature overview data
        tickets: Backend and frontend tickets
    
    Returns:
        bytes: PDF content as bytes
    """
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter, topMargin=inch, bottomMargin=inch)
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        textColor=colors.HexColor('#2c3e50')
    )
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=12,
        spaceBefore=20,
        textColor=colors.HexColor('#34495e')
    )
    subheading_style = ParagraphStyle(
        'CustomSubHeading',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=8,
        spaceBefore=12,
        textColor=colors.HexColor('#7f8c8d')
    )
    
    story = []
    
    # Title
    story.append(Paragraph(title, title_style))
    story.append(Spacer(1, 20))
    
    # Description
    story.append(Paragraph("Description", heading_style))
    story.append(Paragraph(feature_overview.description, styles['Normal']))
    story.append(Spacer(1, 15))
    
    # Acceptance Criteria
    story.append(Paragraph("Acceptance Criteria", heading_style))
    if feature_overview.acceptance_criteria:
        for criterion in feature_overview.acceptance_criteria:
            story.append(Paragraph(f"• {criterion}", styles['Normal']))
    else:
        story.append(Paragraph("No acceptance criteria defined yet.", styles['Italic']))
    story.append(Spacer(1, 15))
    
    # Backend Tasks
    story.append(Paragraph("Backend Development Tasks", heading_style))
    if tickets.backend:
        for i, ticket in enumerate(tickets.backend, 1):
            story.append(Paragraph(f"Task {i}: {ticket.title}", subheading_style))
            story.append(Paragraph(ticket.description, styles['Normal']))
            
            if ticket.technical_details:
                story.append(Paragraph(f"<b>Technical Details:</b> {ticket.technical_details}", styles['Normal']))
            
            if ticket.acceptance_criteria:
                story.append(Paragraph("<b>Acceptance Criteria:</b>", styles['Normal']))
                for criterion in ticket.acceptance_criteria:
                    story.append(Paragraph(f"• {criterion}", styles['Normal']))
            
            if ticket.cursor_prompt:
                story.append(Paragraph(f"<b>Cursor Prompt:</b> {ticket.cursor_prompt}", styles['Normal']))
            
            story.append(Spacer(1, 10))
    else:
        story.append(Paragraph("No backend tasks defined yet.", styles['Italic']))
    
    story.append(Spacer(1, 15))
    
    # Frontend Tasks
    story.append(Paragraph("Frontend Development Tasks", heading_style))
    if tickets.frontend:
        for i, ticket in enumerate(tickets.frontend, 1):
            story.append(Paragraph(f"Task {i}: {ticket.title}", subheading_style))
            story.append(Paragraph(ticket.description, styles['Normal']))
            
            if ticket.technical_details:
                story.append(Paragraph(f"<b>Technical Details:</b> {ticket.technical_details}", styles['Normal']))
            
            if ticket.acceptance_criteria:
                story.append(Paragraph("<b>Acceptance Criteria:</b>", styles['Normal']))
                for criterion in ticket.acceptance_criteria:
                    story.append(Paragraph(f"• {criterion}", styles['Normal']))
            
            if ticket.cursor_prompt:
                story.append(Paragraph(f"<b>Cursor Prompt:</b> {ticket.cursor_prompt}", styles['Normal']))
            
            story.append(Spacer(1, 10))
    else:
        story.append(Paragraph("No frontend tasks defined yet.", styles['Italic']))
    
    # Footer
    story.append(Spacer(1, 30))
    story.append(Paragraph("Generated by Lawrence - AI Product Owner Assistant", styles['Italic']))
    
    # Build PDF
    doc.build(story)
    buffer.seek(0)
    return buffer.getvalue()


def get_export_filename(title: str, export_format: str) -> str:
    """
    Generate a filename for the export based on title and format.
    
    Args:
        title: Feature title
        export_format: Export format ("markdown" or "pdf")
    
    Returns:
        str: Formatted filename with title in kebab-case (words separated by hyphens)
    """
    
    # Clean title and convert to kebab-case
    safe_title = "".join(c.lower() for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
    
    safe_title = safe_title.replace(' ', '-').replace('_', '-')
    
    # Remove any consecutive hyphens
    while '--' in safe_title:
        safe_title = safe_title.replace('--', '-')
    
    # Truncate if too long
    if len(safe_title) > 50:
        safe_title = safe_title[:47] + "..."
    
    # Safety check: if title becomes empty after filtering, use default
    if not safe_title:
        safe_title = "feature-export"
    
    # Add timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if export_format == "pdf":
        filename = f"{safe_title}_{timestamp}.pdf"
    else:
        filename = f"{safe_title}_{timestamp}.md"
    
    return filename 